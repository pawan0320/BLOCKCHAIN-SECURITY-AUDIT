import re

# Define common Solidity vulnerabilities
vulnerabilities = {
    'Reentrancy': r'call\(.+\)',
    'Integer Overflow/Underflow': r'\w+\s+=\s+\w+\s+[+-]\s+\w+;',
    'Unrestricted Access': r'public',
}

# Function to check for vulnerabilities
def check_smart_contract(contract_code):
    detected_vulnerabilities = []
    for vuln_name, pattern in vulnerabilities.items():
        if re.search(pattern, contract_code):
            detected_vulnerabilities.append(vuln_name)
    return detected_vulnerabilities

# Example Solidity contract (this should be replaced by the actual smart contract)
solidity_code = '''
pragma solidity ^0.5.0;

contract Example {
    uint256 public totalSupply;
    
    function sendMoney(address payable recipient) public {
        recipient.call.value(totalSupply)("");
        totalSupply -= totalSupply;
    }
}
'''

# Perform the vulnerability scan
detected_vulnerabilities = check_smart_contract(solidity_code)

if detected_vulnerabilities:
    print("[*] Detected vulnerabilities in the smart contract:")
    for vulnerability in detected_vulnerabilities:
        print(f" - {vulnerability}")
else:
    print("[+] No vulnerabilities detected in the smart contract.")
